
plsql
	plsql(Procedure Language & Structured Query Language)结构化查询语言
	是对sql语言的一个补充，将一些简单的逻辑放到数据库当中来完成，减少java程序的负担
	
	语法：
		DECLARE
			--声明部分：变量、类型、游标..
		BEGIN
			--执行部分：执行sql语句、以及plsql语句，即程序的主要部分
		EXCEPTION
			--异常部分：错误处理
		END;
	
	声明变量：
		变量名 数据类型(大小);
		
	声明常量：
		常量名 constant 数据类型(大小);
	
	赋值：
		:=
		
	IF条件分支语句：
		语法：
			IF 条件 THEN
				内容
			ELSIF 条件 THEN
				内容
			ELSE
				内容
			END IF;
			
	CASE语句：
		语法：
			CASE 值
				WHEN 值 THEN
					内容
				WHEN 值 THEN
					内容
				...
				ELSE 
					内容
			END CASE;
		ps:
			case 后面接值，when后面也接值，那就是根据值来选择
			case 后面没东西，根据when后面的条件结果来选择
			
-----------------------------------------------------------------------------------------------------------
	
	LOOP循环：
		语法：
			LOOP
				要执行的语句;
			EXIT WHEN 条件;	--条件满足，退出循环
			END LOOP;
			
	WHILE循环：
		WHILE 条件 LOOP
			....
		END LOOP;
		
	FOR循环：
		FOR 用来接收的变量 IN reverse 下限..上限 LOOP
			....
		END LOOP;
		
		ps:
			reverse控制顺序，默认是从下限到上限，reverse是从上限到下限

-----------------------------------------------------------------------------------------------------------

	查询出来的结果，需要使用into接收，格式为：
		select 列名 into 变量 from 表名;
		
	在plsql代码块中，查询语句查出来的结果，必须要保存到变量中	
	
	EXCEPTION常见异常：
		no_data_found			未找到任何数据
		too_many_rows			语句返回多行数据
		zero_divide				除以0
		value_error				类型转换错误
		storage_error			运行时内存溢出或内存不足
	
----------------------------------------------------------------------------------------------------------

触发器：
	触发器的定义就是说某个条件成立时，触发器里面所定义的语句就会被自动执行
	因此触发器不需要人为的去调用，也不能调用
	触发器的触发条件其实在你定义的时候就已经设定好了
	
	语法：
		create [or replace] trigger 触发器名 触发时间 触发事件
		on 表名
		[for each row]
		begin
			plsql语句
		end;
		
		触发器名：
			触发器对象的名称。由于触发器是数据库自动执行的，因此该名称只是一个名称，没有实质用途。
		
		触发时间：
			指明触发器何时执行，该值可取：
				before:表示在数据库动作之前触发器执行
				after:表示在数据库动作之后触发器执行
				
		触发事件：
			指明哪些数据库动作会触发此触发器，该值可取：
				insert:数据库插入会触发此触发器
				update:数据库修改会触发此触发器
				delete:数据库删除会触发此触发器
		
		表名：
			数据库触发器所在表，触发器作用在哪张表上
			
		for each row：
			对表的每一行触发器执行一次。如果没有这一选项，则只对整个表执行一次。
			
-----------------------------------------------------------------------------------------------------------
		
存储过程	
	语法：
		create or replace procedure 存储过程名(
			参数名 IN/OUT 数据类型,
			参数名 IN/OUT 数据类型,
			参数名 IN/OUT 数据类型
		)
		is
			声明部分
		begin
			plsql内容
		end;
		
	存储过程可以分为带参数和不带参数，参数有IN和OUT之分	
	IN为入参
	OUT为出参
		
	授权	
	grant create any table to 帐户名;
	grant create any procedure to 帐户名; 	
	grant execute any procedure to 帐户名;
	grant  debug connect session to 帐户名;	
		
	commit;			提交
    rollback;		回滚
		
--------------------------------------------------------------------------------------------------------

游标
	游标是sql的一个内存工作区，由系统或用户以变量的形式定义。
	游标的作用就是用于临时存储从数据库中提取的数据块。
	
	游标有两种类型：
		1.隐式游标
		2.显式游标
		
		在前面程序中用到的select..into..查询语句，一次只能从数据库中提取一行数据，对于这种形式的查询和DML操作，系统都会使用一个隐式游标。
			例：
				select into
				delete
				update
				insert
				都会使用隐式游标
				
		但是如果要提取多行数据，就要有程序员定义一个显式游标，并通过与游标有关的语句进行处理，显式游标对应一个返回结果为多行多列的select语句。
	
		游标的属性有4种：
			SQL%ROWCOUNT  整型    --sql语句影响的行数
			SQL%FOUND	  布尔型  --语句影响了一行或者多行时为true(常用)
			SQL%NOTFOUND  布尔型  --与上面相反
			SQL%ISOPEN	  布尔型  --游标是否打开，打开为true
	
	
		cursor 游标名 is 查询语句;--定义游标
	
	
	
	
	
	
	
	
	