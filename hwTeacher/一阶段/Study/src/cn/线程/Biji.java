package cn.线程;

/**
 * 什么是程序？
 * 		安装在磁盘上的一段指令集合，它是静态的概念
 * 
 * 什么是进程？
 * 		它是运行中的程序，是动态的概念，每个进程都有独立的资源空间
 * 
 *什么是线程？
 *			线程，又称为轻量级进程，是程序执行流的最小单元，是程序中一个单一的顺序控制流程。
 *			线程是进程中的一个实体，是被系统独立调度和分派的基本单位
 *
 *什么是多线程
 *			多线程则指的是在单个程序中可以同时运行多个不同的线程执行不同的任务
 *
 *多线程：
 *			1.一个进程可以包含一个或多个线程
 *			2.一个程序实现多个代码同时交替运行就需要产生多个线程
 *			3.线程本身不拥有系统资源，与同属一个进程的其他线程共享所在进程所拥有的资源
 *			4.同一个进程中的多个线程之间可以并发执行，CPU会随机抽取时间，让我们的程序一会做这件事，一会做另一件事情
 *
 *多线程的目的：
 *			最大限度的利用CPU资源
 *
 *线程生命周期：
 *			与人有生老病死一样，线程也同样要经历新建、就绪、运行、阻塞和死亡五种不同的状态。
 *			新建状态：
 *					使用new关键字创建一个线程，该线程仅仅是一个空对象，系统还没有给它分配资源。
 *			就绪状态：
 *					使用start()方法启动一个线程后，系统为该线程分配除了CPU外的所需资源
 *					yield()暂时剥夺当前线程的CPU资源，重新进入就绪状态
 *					isAlive()判断线程是否处于就绪/运行状态
 *			运行状态：
 *					CPU随机选择某一个就绪状态的线程，使其占有CPU并转为运行状态。
 *					进入运行状态的线程，会去执行run()方法					
 *			阻塞状态：
 *					一个正在运行的线程因某些原因不能继续运行时，就进入阻塞状态
 *					sleep()让线程休眠，超时后自动苏醒
 *					wait()让线程等待，等待唤醒
 *					notify()随机唤醒某一个等待中的线程
 *					notifyAll()唤醒全部等待中的线程
 *
 *			死亡状态：
 *					线程在run()方法执行结束后进入死亡状态
 *					使用退出标识，使线程正常退出。
 *					stop()强制终止线程(可能发生不可预料的结果)
 *
 *创建线程的两种方式：
 *			1.继承Thread类
 *			2.实现Runnable接口		
 *
 *用户线程,守护线程
 *			只要有至少一个用户线程还在运行，守护线程就不会停止(不会受主线程的影响)
 *			一但所有用户线程都停止了，守护线程也会跟着主线程一起停止
 *
 *为什么需要同步：
 *			1.线程同步是为了防止多个线程访问一个数据对象时，对数据造成破坏
 *			2.线程的同步是保证多线程安全访问竞争资源的一种手段
 *
 *Java中每一个对象都一把内置锁
 *
 *synchronized：
 *				1.填"this"
 *							线程使用的是同一个对象(同步)
 *							线程使用的不是同一个对象(不同步,因为一个对象一个锁)
 *				2.填"类.class"，只要线程使用的对象是根据这个类来创建的，就共用一把锁
 *				3.填"静态对象"，多个线程抢静态对象的锁
 *							静态对象可以有多个，我们可以使用的锁就也有多个
 *
 *死锁
 *
 */
public class Biji {

}
