数组:
	一维数组：
		概念：同一种数据类型的数据的集合，其实数组就是一个容器。
		
		1.存储相同数据类型的一组数据。
		2.对同类型数据集中存储、管理，便于使用。
		3.数组会自动给元素排序，从0开始编号
		4.数组的类型就是数组内元素的类型
		5.数组本身是一种引用数据类型
		6.数组名只是引用，指向堆中的创建的数组对象，该对象保存一组其他引用或直接值
		7.数组中所有元素在内存中连续储存
		
	数组的声明：
		告诉电脑数据类型是什么
		
		数据类型[] 数组名;
		
	创建数组：
		为数组分配内存空间
		使用new关键字
		
		new 数据类型[];
		
	初始化数组：
		静态初始化
			数据类型[] 数组名 = new 数据类型[]{需要存入的值};
			隐式初始化：
				数据类型[] 数组名 = {需要存入的值};
			
		动态初始化
			数据类型[] 数组名 = new 数据类型[元素个数或数组长度];
		
	数组的长度
		获取数组的长度
		语法：
			数组名.length
		
	需要注意的点：
		1.数组不能声明在方法外
		2.如果没有使用new关键字声明创建数组，则声明、创建、初始化都必须写在一行
		3.[0]		为数组中的第1个元素
		  [1]		为数组中的第2个元素
		  [99]		为数组中的第100个元素
	
	遍历数组：	
		1.for循环
			获取数组中的所有元素，用于使用
		
		2.foreach循环
			后期新加的一种循环，一般用于遍历
			遍历数组，相对于for循环遍历来说，更加简洁、方便。
			语法：
				for(数据类型 变量名:需要遍历的数组名){
				
				}
				:前面声明的变量，是用于接收数组遍历出来的结果
				
		for循环和foreach循环的区别：
			1.foreach循环适用于条件比较简单的情况下进行遍历。
			  for循环适用于条件相对复杂的情况下进行遍历
			
			2.foreach循环写法相对简单好理解，但功能也相对简单
			  for循环条件、参数等相对较多，虽然复杂，但功能也更强大
			  
			3.需要向数组内存值的情况下，不适合适用foreach循环，foreach循环只适合用来遍历数组。
			
	排序
		冒泡排序
			是一种简单的排序算法，它重复的走访要排列的元素，一次比较两个元素，如果他们的顺序错误，就交换他们的位置，重复的进行，知道没有再需要交换为止，数组即已排序完成。
			
		选择排序
			首先在未排序的数组中找到最小元素存放到数组的起始位置，然后再从剩余未排序的元素中继续寻找最小元素。
			依次类推，直到所有元素排序完毕。
			
		插入排序
			它是通过构建有序数组，对于未排序数据，在已排序数据中从后向前扫描，找到相应位置并插入，从后向前扫描的过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
			
	查找
		线性查找
			又称之为顺序查找，在一列给定的值中进行搜索，从一段开始，到一段结束，逐一检查每一个元素，直到找到所需要的元素为止。
			
		二分查找法
			又称之为折半查找法，它是一种效率较高的查找法。
			
			将数组排好序，查找的过程中采用跳跃的方式进行查找，即先序以有数组的中点位置为比较对象，如果要找的元素值小于该中点元素，则将待查数组缩小为左半部分，否则为右半部分。
			
			1
			
			{1,4,7,		11,		23,25,66}
			0-
			
			
			
			ps：
				1.找到数组的中点   （0+5）/2
				2.需要查找的数字和中点，确定左右
				3.继续在半区中找中点
				4.   ....
				5.当中点的值和我们要找的值相等的时候，程序停止
		
	二维数组
		可以看成以一维数组为元素的数组。
		二维数组的声明和初始化，应该按照从高维到低维的顺序进行。
		对应任何类型的二维数组而言，第一维的大小决定了二维数组对象的大小
			
		声明并创建：
			int[][] b = new int[第二维的长度][第一维的长度];
			
			
			
			
			
			
			
			
			
			
			