override  方法重写                          随机数  Math.random()
overload  方法重载
方法重写
方法重载
封装  信息封装起来  通过set get方法


this 表示本类中的  用来区分
静态代码块  在构造方法前执行，只会执行一次，用于静态变量的初始化

方法重载，，在同一个类中，同名不同参的数的称之为方法重载

public void aaa(){
}
public void aaa(String b){
}
public void aaa(int a){daobao

导包  import java.util下
第二种  cn.com直接加在包前边

继承  是让类与类之间产生父子关系
子类继承父类
父类更通用更抽象
子类更特殊更具体
继承背后的思想就是基于已存在的类来构建新的类
当从已存在的类继承时

继承优点
1  代码的重用性
2  体现不同的抽象层次

       直接或间接的继承的某些类 
       Object是所有类的父类

super关键字
    super和this有点类似，super代表父类的
    super 可以调用父类的构造方法
              调用父类的属性
              调用父类的方法

方法重写  两个类之间一点要存在继承关系  才会有方法重写
          在子类中重写父类中的
          访问修饰符可以不一致，但是，子类中重写的方法的访问修饰符，不能比父类中的更严格
          子类只能比父类的权限更大 
final  修饰  变量，类，方法 
       修饰哪一个类  表示那个类不能被继承
       修饰哪一个方法，那这个方法不能被重写
       
       overload   方法重载  除方法名不变  其他都可以变
       override   方法重写  只有中间可以改变
多态是基于封装和继承
    一类事物的多种形态
对象向下转型，由子类转型成父类。
向上转型是从一个较专用类型向较通用类型转换，所以总是安全的
向下转型是不安全的
instanceof前面填写父类的对象名 后面填写子类的类名。
动态绑定
  在运行的时候绑定
静态绑定
  在编译的时候绑定
       final，static,private和构造结构都是静态绑定

抽象是把多个事物的共性提取出来。
抽象类在Java中可以定义没有方法体的方法，该方法由其子类来具体的实现，这种没有方法体的方法，就是抽象类，含有这种抽象方法的类就叫做抽象类。
抽象类定义：含有抽象方法的类。抽象类用abstract来修饰。抽象类不能够被实例化。抽象类中是可以有具体方法，可以没有抽象方法
抽象方法：1.只有方法头没有方法体 例：public void sss()
2.抽象方法用abstract来修饰
3.抽象方法代表一种不确定的操作或者行为
4.抽象方法不能被调用
模板方法模式：一个模板方法用一些抽象的操作定义一个算法，而子类将重定义这些操作以提供具体行为
接口：1.接口中只能存放静态常量,不能存放静态的抽象方法。2.通过实现接口，java可以实现多实现。3.一个类可以同时继承一个父类，并且实现多个接口。4.接口与接口之间可以相互继承。
抽象类和接口：1.抽象类和实现类之间是一种继承关系。2.接口和实现类在概念上不要求相同，接口只是抽取相互之间没有关系的类的共同特征，而不去关注类之间的关系，它可以使没有层次关系的类具有相同的行为。
面向接口编程：开发项目时，主体部分都使用接口完成，如果需要更改接口内容，只需更改其实现类。

内部类：将一个类定义另一个当中   特点：1.内部类中可以直接访问外部类的属性。2.外部类不能直接访问内部类中的属性。3.间接的去实现多继承。
成员内部类：外部类名.内部类名 标识符 = 外部类的实例.new 内部类名（）；
内部类访问外部类可以直接访问。如果内部类中的资源和外部类中的资源名字相同，想使用外部类的资源，需要用以下方式：外部类名.this.属性名    外部类名.this.方法名
限制：1.成员内部类和外部类不能重名。2.不能再成员内部类中定义静态的属性 方法和类。
静态内部类：1.静态内部类不能访问外部类的非静态的属性和方法。2.静态内部类和外部类不能重名。3.静态内部类和外部类是完全平级的，调用方式跟我们平常的类一致。
局部内部类：1.局部内部类不能加访问修饰符。2.局部内部类和外部类不能重名。
匿名内部类：1.

自动装箱  自动拆箱     有时候需要将int这样的基本数据类型转换成引用数据类型。  J2SE 5.0 提供了自动装箱 自动拆箱。
Integer(int)  Character(char) Booolean(boolean)  Byte(byte)  Short(short) Long (long)  Float(float)    Double(double)
1.将基本数据类型装箱称为一个包装类，可以使用更多的方法。 2.转成包装类之后，更符合面向对象的思想。3.在泛型中不能使用基本数据类型，只能使用引用数据类型。

枚举类；是一个比较特殊的类。1.枚举类中的所有枚举值都是public final static，所以全部大写。2.可以有构造方法，构造方法要是私有，不允许有public构造方法。3.构造方法中的参数个数和类型，必须和枚举值后面小括号中的一致。可以在需要大量静态常量中使用。

String是一个不可变的，所有看上去改变它的值的操作，实际上是生成新的String            StringBuffer   StringBuilder     String对象一旦创建就不能改变，如果需要进行大量的字符串修改操作，应该使用StringBuffer或者StringBulider,结果可以转换回String对象。     StringBuffer：线程安全的可变字符序列。每个字符串缓冲区都有一定的容量，只要修改的内容没有超出这个容量，就不需要重新分配空间。  当缓冲区不够用时，会自动增加容量。  StringBuilder： jdk5开始才有的，为StringBuffer进行补充。 一般优先使用StringBuilder类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。


任何东西跟字符串相加都是字符串。

Random随机数类：  创建Random对象  Random rd = new Random()； int i = rd.nextInt();     公式： int nums = rand.nextInt(MX-MIN+1)+MIN;     例：取值70-290 int nums = rand.nextInt(221)+70;
在java中有三个随机数的方式：1.创建Random类创建对象 2.Math类中的random方法 3.system.currentTimeMillis();

异常：  所谓异常是指程序运行的过程中发生的一些不正常的事件。   例  数据下标越界异常  数据类型转换异常  空指针异常  0不能为被除数
异常会使程序终止，程序终止后，所有用户都无法访问。   异常分为两种：1.编译时异常   javac  2.运行时异常  java 
如何避免程序中断？   java异常的两种处理机制  1.捕获异常   例：try-catch-finally   finally在最后执行，一定会执行（捕获异常不会影响程序运行  一种预防措施）  2.抛出异常 throws将异常抛给上一级 throw手动抛出异常    final/finally无论捕获异常与否，都会执行/finalize调用垃圾回收器的 