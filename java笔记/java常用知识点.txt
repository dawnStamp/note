
2019/5/30
逻辑运算符：用于连接关系表达式
&（与）：有false则为false   左边无论是什么，右边都会执行
|（或）:有 true则为true
^（异或）:相同则false，不同则true
!(非) ：true则false，false则true
&&(双与):有短路效果，左边为false时,右边不执行
||(双或):有短路效果，左边为true时,右边不执行

2019/6/5
数组
 
  定义格式：
           静态初始化
          A：数据类型[] 数据名 = new 数据类型[]{元素一,元素二...};
	例：int[] arr1 = new int[]{1,2,3,4,5};
	       int[] arr2 = {1,2,3,4,5};	
 
           动态初始化
           B：数据类型[] 数组名 = new 数据类型 [数组长度];
	例：int[] arr3 = new int[3];


2019/6/10
方法的参数如果是基本数据类型：形式参数的改变不影响实际参数
 
  形式参数：用于接收实际参数的变量
  实际参数：实际参与运算的变量
  
   方法的参数如果是基本数据类型：形式参数的改变不影响实际参数
 
  形式参数：用于接收实际参数的变量
  实际参数：实际参与运算的变量


如果参数是引用数据类型：
       形式参数的改变直接影响实际参数



方法的调用：(有明确返回值的方法调用)
       A：单独调用，没有意义
       B：输出调用，有意义，但是不够好，因为我可能需要拿结果进行进一步的操作
       C：赋值调用



	   
	   
 方法重载：在同一个类中，出现了方法名相同的情况。
 
  方法重载的特点：
       方法名相同，  参数列表不同。与返回值无关。
       参数列表不同：
               参数的个数不同
               参数对应的数据类型不同
 

  注意：
       在调用方法的时候，java虚拟机会通过参数列表的不同来区分同名的方法。	   
	   
	   
static:是一个关键字，用于修饰成员变量和成员方法
 static的特点：
              被所有的对象所共享
              可以使用类名调用
              静态的加载优先于对象
              随着类的加载而加载

 static的注意事项：
                 静态方法：
                           可以调用静态的成员变量
                           可以调用静态的成员方法
                           不能调用非静态成员变量
                           不能调用非静态成员方法
                           静态方法只能调用静态的成员
                 非静态方法：
                           可以调用静态的成员变量
                           可以调用静态的成员方法
                           可以调用非静态成员变量
                           可以调用非静态成员方法
 
          静态的方法中没有this这个对象
		  
		  
static的优点：
				对对象的共享数据提供单独空间的存储，节省空间，没有必要每一个对象都存储一份
				可以直接被类名调用，不用在堆内存创建对象
static的缺点：
				访问出现局限性。（静态虽好，但只能访问静态）
