异常 Exception
 
  Exception in thread "main" java.lang.ArithmeticException: / by zero   除零异常
  ArithmeticException  算数异常
 
       我们在写代码的时候，经常出现一些小问题，那么为了方便我们处理这些问题，java为我们提供了异常机制
 
       异常包含了错误的类型，原因以及位置
 
    异常：不正常，我们在写代码时出现的编译时或者运行时的错误
 
    异常的体系结构：Throwable（最顶层）
                           Error：出现的不能够处理的严重问题
                           Exception：可以处理的问题
 
    异常的处理方式：
           捕获处理
           try...catch语句
 
           try{
               有可能出现问题的代码
           }catch(){
               处理异常;
           }
 
           try...catch的执行顺序：
                   首先执行try语句
                           如果发现异常，异常下面的代码不在执行，直接跳catch语句中，然后处理异常，catch语句结束后整个语句结束
                           没发现异常不会执行catch语句
 
           抛出异常
           使用关键词throws在方法的声明处抛出异常
               当我们不想处理异常，或者处理不了时，可以选择抛出异常，谁调用方法谁处理异常
 
 
    Jvm处理异常的方式：
           如果出现异常我们没有处理，jvm会帮我们进行处理，他会把字长的类型，原因还有位置显示在命令行
           并且还终止了程序，异常后面的代码将不再执行
		   
	处理多个异常
       可以使用多个try...catch
       使用一个try和多个catch
 
   多个catch之间的顺序：
          多个catch之间可以有子父类
          平级或者同级之间没有顺序关系
          如果有子父类，父类异常必须放在后面	

Throwable的常用方法
               String getMessage() :返回此throwable的详细消息字符串。
               String toString()  : 返回此可抛出的简短描述。
               void printStackTrace() :将此throwable和其追溯打印到标准错误流。


finally:组合try...catch来使用，用于释放资源等收尾工作，无论try...catch是否执行，finally一定会执行		  
		  
异常的分类：
    运行时期异常:RuntimeException的子类就是运行时期异常，在编译时期可以自由选择处理或者不处理
    编译时期异常:Exception的子类，非RuntimeException的子类，在编译时期必须处理  
	
	throws:处理异常的异常的一种方式，把异常抛出，由调用者来处理
    throw:制造异常的方式	
	
	注意:如果排除的是编译的时期异常,必须在方法声明处抛出(throws)
 
   如何自定义一个异常类呢
           写一个类去继承Exception或者RuntimeException,然后实现多个构造即可