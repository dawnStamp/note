线程
 
  多线程
 
  进程:当前正在运行的程序，一个应用程序所在内存中的执行区域
  线程:进程中的一个执行控制单元
 
  一个进程可以有一个线程，也可以有多个线程
 
  单线程：安全性高，但是效率低
  多线程：安全性低，效率高
 
  多线程案列：360，迅雷等
 
  多线程的实现方式：
       方式1:一种方法是将类声明为Thread 的子类。该子类应重写Thread 类的run 方法
       接下来可以分配和启动该子类的实现
 
   Thread
       String getName() :返回此线程的名称。
       void setName(String name) :将此线程的名称更改为等于参数 name 。
 
  CPU执行程序顺序是随机性的
  
  
	main方法是单线程
 
   多线程的第二种实现方式:创建线程的另一种方法是声明实现Runnable 接口的类，该类然后实现 run方法，然后可以分配该类的实例，在创建 Thread 时作为一个参数来传递并启动
 
   Thread(Runnable target)
   static Thread currentThread():返回当前线程对象
   static void sleep(long millis) :让当前线程睡一会
   
   
   
synchronized : 同步 （锁）,可以修饰代码块和方法，被修饰的代码块和方法一旦被某个线程访问，则直接锁住，其他的线程将无法访问
 
   同步代码块：
           synchronized(锁对象){
 
           }
 
  注意:锁对象需要被所有的线程所共享
 
  同步:安全性高，效率差
  非同步:效率高，但是安全性低
  
  同步方法：使用synchronized修饰的方法，一旦被一个线程访问，则整个方法全部锁住，其他线程则无法访问
 
  注意:非静态同步方法的锁对象是this
       静态的同步方法的锁对象是当前类的字节码对象